# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#echo $(DY_UTIL) deliverworkspacewithname $(DY_CONFIG) DEV $(DY_JIRAID) $(Build.BuildId) DESJARDINS $(DY_USERNAME) $(DY_PASSWORD) $(WORKSPACENAME)
pool: 'siebeltools'
variables:
- group: testgroup
stages:
- stage: getActiveWorkspace
  jobs:
  - job: getActiveWorkspace
    steps:
    - powershell: |
        $mycmd="$env:DY_UTIL getactiveworkspace $env:DY_CONFIG $env:DY_ENV $env:DY_JIRAID $env:MY_MAPPED_BUILDID DESJARDINS $env:MY_MAPPED_DY_USERNAME $env:MY_MAPPED_DY_PASSWORD"
        Invoke-Expression $mycmd | Tee-Object -Variable output
        Write-Host $mycmd
        $pattern = "<WORKSPACE>(.*)<WORKSPACE>" 
        $result = [regex]::match($output, $pattern).Groups[1].Value
        Write-Host $result
        Write-Host "##vso[task.setvariable variable=wsname;isOutput=true]$result"
      env:
        MY_MAPPED_DY_USERNAME: $(DY_USERNAME)
        MY_MAPPED_DY_PASSWORD: $(DY_PASSWORD) 
        MY_MAPPED_BUILDID: $(Build.BuildId)
      displayName: GetActiveWorkspace
      name: getactivews

- stage: B
  variables:
    wsname: $[ stageDependencies.getActiveWorkspace.getActiveWorkspace.outputs['getactivews.wsname'] ]
  jobs:
  - job: B1
    steps:
    - script: echo $(wsname)
  - job: B2
    steps:
    - script: echo "B2"
